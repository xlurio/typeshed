from _typeshed import Incomplete

from scrapy.utils.misc import create_instance as create_instance

logger: Incomplete

class ScrapyPriorityQueue:
    @classmethod
    def from_crawler(cls, crawler, downstream_queue_cls, key, startprios=...): ...
    crawler: Incomplete
    downstream_queue_cls: Incomplete
    key: Incomplete
    queues: Incomplete
    curprio: Incomplete
    def __init__(self, crawler, downstream_queue_cls, key, startprios=...) -> None: ...
    def init_prios(self, startprios) -> None: ...
    def qfactory(self, key): ...
    def priority(self, request): ...
    def push(self, request) -> None: ...
    def pop(self): ...
    def peek(self): ...
    def close(self): ...
    def __len__(self): ...

class DownloaderInterface:
    downloader: Incomplete
    def __init__(self, crawler) -> None: ...
    def stats(self, possible_slots): ...
    def get_slot_key(self, request): ...

class DownloaderAwarePriorityQueue:
    @classmethod
    def from_crawler(cls, crawler, downstream_queue_cls, key, startprios=...): ...
    downstream_queue_cls: Incomplete
    key: Incomplete
    crawler: Incomplete
    pqueues: Incomplete
    def __init__(self, crawler, downstream_queue_cls, key, slot_startprios=...) -> None: ...
    def pqfactory(self, slot, startprios=...): ...
    def pop(self): ...
    def push(self, request) -> None: ...
    def peek(self): ...
    def close(self): ...
    def __len__(self): ...
    def __contains__(self, slot): ...
