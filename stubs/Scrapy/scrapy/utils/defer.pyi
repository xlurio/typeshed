from asyncio import Future
from typing import Any, Callable, Coroutine, Generator, Iterable, Union

from scrapy.exceptions import IgnoreRequest as IgnoreRequest
from scrapy.utils.reactor import is_asyncio_reactor_installed as is_asyncio_reactor_installed
from twisted.internet.defer import Deferred, DeferredList
from twisted.python.failure import Failure as Failure

def defer_fail(_failure: Failure) -> Deferred: ...
def defer_succeed(result) -> Deferred: ...
def defer_result(result) -> Deferred: ...
def mustbe_deferred(f: Callable, *args, **kw) -> Deferred: ...
def parallel(iterable: Iterable, count: int, callable: Callable, *args, **named) -> DeferredList: ...
def process_chain(callbacks: Iterable[Callable], input, *a, **kw) -> Deferred: ...
def process_chain_both(callbacks: Iterable[Callable], errbacks: Iterable[Callable], input, *a, **kw) -> Deferred: ...
def process_parallel(callbacks: Iterable[Callable], input, *a, **kw) -> Deferred: ...
def iter_errback(iterable: Iterable, errback: Callable, *a, **kw) -> Generator: ...
def deferred_from_coro(o) -> Any: ...
def deferred_f_from_coro_f(coro_f: Callable[..., Coroutine]) -> Callable: ...
def maybeDeferred_coro(f: Callable, *args, **kw) -> Deferred: ...
def deferred_to_future(d: Deferred) -> Future: ...
def maybe_deferred_to_future(d: Deferred) -> Union[Deferred, Future]: ...
