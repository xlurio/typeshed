from _typeshed import Incomplete
from collections.abc import Generator

from scrapy.exceptions import DropItem as DropItem, NotConfigured as NotConfigured
from scrapy.http import Request as Request
from scrapy.pipelines.files import FileException as FileException, FilesPipeline as FilesPipeline
from scrapy.settings import Settings as Settings
from scrapy.utils.misc import md5sum as md5sum
from scrapy.utils.python import to_bytes as to_bytes

class NoimagesDrop(DropItem): ...
class ImageException(FileException): ...

class ImagesPipeline(FilesPipeline):
    MEDIA_NAME: str
    MIN_WIDTH: int
    MIN_HEIGHT: int
    EXPIRES: int
    THUMBS: Incomplete
    DEFAULT_IMAGES_URLS_FIELD: str
    DEFAULT_IMAGES_RESULT_FIELD: str
    expires: Incomplete
    IMAGES_RESULT_FIELD: Incomplete
    IMAGES_URLS_FIELD: Incomplete
    images_urls_field: Incomplete
    images_result_field: Incomplete
    min_width: Incomplete
    min_height: Incomplete
    thumbs: Incomplete
    def __init__(self, store_uri, download_func: Incomplete | None = ..., settings: Incomplete | None = ...) -> None: ...
    @classmethod
    def from_settings(cls, settings): ...
    def file_downloaded(self, response, request, info, *, item: Incomplete | None = ...): ...
    def image_downloaded(self, response, request, info, *, item: Incomplete | None = ...): ...
    def get_images(self, response, request, info, *, item: Incomplete | None = ...) -> Generator[Incomplete, None, None]: ...
    def convert_image(self, image, size: Incomplete | None = ...): ...
    def get_media_requests(self, item, info): ...
    def item_completed(self, results, item, info): ...
    def file_path(
        self, request, response: Incomplete | None = ..., info: Incomplete | None = ..., *, item: Incomplete | None = ...
    ): ...
    def thumb_path(self, request, thumb_id, response: Incomplete | None = ..., info: Incomplete | None = ...): ...
