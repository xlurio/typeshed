from _typeshed import Incomplete
from ipaddress import IPv4Address, IPv6Address
from typing import List, Optional, Union

from h2.events import (
    ConnectionTerminated,
    DataReceived,
    Event as Event,
    ResponseReceived,
    SettingsAcknowledged,
    StreamEnded,
    StreamReset,
    WindowUpdated,
)
from h2.exceptions import H2Error
from scrapy.core.http2.stream import Stream as Stream, StreamCloseReason as StreamCloseReason
from scrapy.http import Request as Request
from scrapy.settings import Settings as Settings
from scrapy.spiders import Spider as Spider
from twisted.internet.defer import Deferred as Deferred
from twisted.internet.protocol import Factory, Protocol
from twisted.protocols.policies import TimeoutMixin
from twisted.python.failure import Failure as Failure
from twisted.web.client import URI as URI

logger: Incomplete
PROTOCOL_NAME: bytes

class InvalidNegotiatedProtocol(H2Error):
    negotiated_protocol: Incomplete
    def __init__(self, negotiated_protocol: bytes) -> None: ...

class RemoteTerminatedConnection(H2Error):
    remote_ip_address: Incomplete
    terminate_event: Incomplete
    def __init__(self, remote_ip_address: Optional[Union[IPv4Address, IPv6Address]], event: ConnectionTerminated) -> None: ...

class MethodNotAllowed405(H2Error):
    remote_ip_address: Incomplete
    def __init__(self, remote_ip_address: Optional[Union[IPv4Address, IPv6Address]]) -> None: ...

class H2ClientProtocol(Protocol, TimeoutMixin):
    IDLE_TIMEOUT: int
    conn: Incomplete
    streams: Incomplete
    metadata: Incomplete
    def __init__(self, uri: URI, settings: Settings, conn_lost_deferred: Deferred) -> None: ...
    @property
    def h2_connected(self) -> bool: ...
    @property
    def allowed_max_concurrent_streams(self) -> int: ...
    def pop_stream(self, stream_id: int) -> Stream: ...
    def request(self, request: Request, spider: Spider) -> Deferred: ...
    def connectionMade(self) -> None: ...
    def handshakeCompleted(self) -> None: ...
    def dataReceived(self, data: bytes) -> None: ...
    def timeoutConnection(self) -> None: ...
    def connectionLost(self, reason: Failure = ...) -> None: ...
    def connection_terminated(self, event: ConnectionTerminated) -> None: ...
    def data_received(self, event: DataReceived) -> None: ...
    def response_received(self, event: ResponseReceived) -> None: ...
    def settings_acknowledged(self, event: SettingsAcknowledged) -> None: ...
    def stream_ended(self, event: StreamEnded) -> None: ...
    def stream_reset(self, event: StreamReset) -> None: ...
    def window_updated(self, event: WindowUpdated) -> None: ...

class H2ClientFactory(Factory):
    uri: Incomplete
    settings: Incomplete
    conn_lost_deferred: Incomplete
    def __init__(self, uri: URI, settings: Settings, conn_lost_deferred: Deferred) -> None: ...
    def buildProtocol(self, addr) -> H2ClientProtocol: ...
    def acceptableProtocols(self) -> List[bytes]: ...
