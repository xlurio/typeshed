from _typeshed import Incomplete
from abc import ABCMeta, abstractmethod

from scrapy.utils.python import to_unicode as to_unicode

logger: Incomplete

def decode_robotstxt(robotstxt_body, spider, to_native_str_type: bool = ...): ...

class RobotParser(metaclass=ABCMeta):
    @classmethod
    @abstractmethod
    def from_crawler(cls, crawler, robotstxt_body): ...
    @abstractmethod
    def allowed(self, url, user_agent): ...

class PythonRobotParser(RobotParser):
    spider: Incomplete
    rp: Incomplete
    def __init__(self, robotstxt_body, spider) -> None: ...
    @classmethod
    def from_crawler(cls, crawler, robotstxt_body): ...
    def allowed(self, url, user_agent): ...

class ReppyRobotParser(RobotParser):
    spider: Incomplete
    rp: Incomplete
    def __init__(self, robotstxt_body, spider) -> None: ...
    @classmethod
    def from_crawler(cls, crawler, robotstxt_body): ...
    def allowed(self, url, user_agent): ...

class RerpRobotParser(RobotParser):
    spider: Incomplete
    rp: Incomplete
    def __init__(self, robotstxt_body, spider) -> None: ...
    @classmethod
    def from_crawler(cls, crawler, robotstxt_body): ...
    def allowed(self, url, user_agent): ...

class ProtegoRobotParser(RobotParser):
    spider: Incomplete
    rp: Incomplete
    def __init__(self, robotstxt_body, spider) -> None: ...
    @classmethod
    def from_crawler(cls, crawler, robotstxt_body): ...
    def allowed(self, url, user_agent): ...
