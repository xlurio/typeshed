from _typeshed import Incomplete

logger: Incomplete

class StatsCollector:
    def __init__(self, crawler) -> None: ...
    def get_value(self, key, default: Incomplete | None = ..., spider: Incomplete | None = ...): ...
    def get_stats(self, spider: Incomplete | None = ...): ...
    def set_value(self, key, value, spider: Incomplete | None = ...) -> None: ...
    def set_stats(self, stats, spider: Incomplete | None = ...) -> None: ...
    def inc_value(self, key, count: int = ..., start: int = ..., spider: Incomplete | None = ...) -> None: ...
    def max_value(self, key, value, spider: Incomplete | None = ...) -> None: ...
    def min_value(self, key, value, spider: Incomplete | None = ...) -> None: ...
    def clear_stats(self, spider: Incomplete | None = ...) -> None: ...
    def open_spider(self, spider) -> None: ...
    def close_spider(self, spider, reason) -> None: ...

class MemoryStatsCollector(StatsCollector):
    spider_stats: Incomplete
    def __init__(self, crawler) -> None: ...

class DummyStatsCollector(StatsCollector):
    def get_value(self, key, default: Incomplete | None = ..., spider: Incomplete | None = ...): ...
    def set_value(self, key, value, spider: Incomplete | None = ...) -> None: ...
    def set_stats(self, stats, spider: Incomplete | None = ...) -> None: ...
    def inc_value(self, key, count: int = ..., start: int = ..., spider: Incomplete | None = ...) -> None: ...
    def max_value(self, key, value, spider: Incomplete | None = ...) -> None: ...
    def min_value(self, key, value, spider: Incomplete | None = ...) -> None: ...
