from _typeshed import Incomplete
from typing import Dict

from scrapy.commands import BaseRunSpiderCommand as BaseRunSpiderCommand
from scrapy.exceptions import UsageError as UsageError
from scrapy.http import Request as Request
from scrapy.utils import display as display
from scrapy.utils.spider import iterate_spider_output as iterate_spider_output, spidercls_for_request as spidercls_for_request

logger: Incomplete

class Command(BaseRunSpiderCommand):
    requires_project: bool
    spider: Incomplete
    items: Dict[int, list]
    requests: Dict[int, list]
    first_response: Incomplete
    def syntax(self): ...
    def short_desc(self): ...
    def add_options(self, parser) -> None: ...
    @property
    def max_level(self): ...
    def add_items(self, lvl, new_items) -> None: ...
    def add_requests(self, lvl, new_reqs) -> None: ...
    def print_items(self, lvl: Incomplete | None = ..., colour: bool = ...) -> None: ...
    def print_requests(self, lvl: Incomplete | None = ..., colour: bool = ...) -> None: ...
    def print_results(self, opts) -> None: ...
    def run_callback(self, response, callback, cb_kwargs: Incomplete | None = ...): ...
    def get_callback_from_rules(self, spider, response): ...
    spidercls: Incomplete
    def set_spidercls(self, url, opts) -> None: ...
    pcrawler: Incomplete
    def start_parsing(self, url, opts) -> None: ...
    def prepare_request(self, spider, request, opts): ...
    def process_options(self, args, opts) -> None: ...
    def process_request_meta(self, opts) -> None: ...
    def process_request_cb_kwargs(self, opts) -> None: ...
    def run(self, args, opts) -> None: ...
