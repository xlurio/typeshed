from abc import ABCMeta
from collections.abc import MutableMapping
from typing import Callable, Iterable, Iterator

from scrapy.utils.trackref import object_ref as object_ref

class Field(dict[str, object]): ...

class ItemMeta(ABCMeta):
    def __new__(mcs: type[ItemMeta], class_name: str, bases: tuple[type], attrs: object) -> ItemMeta: ...

class Item(MutableMapping[str, object], object_ref, metaclass=ItemMeta):
    fields: dict[str, Field]
    def __init__(self, *args: object, **kwargs: object) -> None: ...
    def __getitem__(self, key: str) -> object: ...
    def __setitem__(self, key: str, value: object) -> None: ...
    def __delitem__(self, key: str) -> None: ...
    def __getattr__(self, name: str) -> None: ...
    def __setattr__(self, name: str, value: object) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[object]: ...
    __hash__: Callable[[], int]
    def keys(self) -> Iterable[str]: ...
    def copy(self) -> Item: ...
    def deepcopy(self) -> Item: ...
