from _typeshed import Incomplete
from abc import ABCMeta
from collections.abc import MutableMapping
from typing import Dict

from scrapy.utils.trackref import object_ref as object_ref

class Field(dict): ...

class ItemMeta(ABCMeta):
    def __new__(mcs, class_name, bases, attrs): ...

class Item(MutableMapping, object_ref, metaclass=ItemMeta):
    fields: Dict[str, Field]
    def __init__(self, *args, **kwargs) -> None: ...
    def __getitem__(self, key): ...
    def __setitem__(self, key, value) -> None: ...
    def __delitem__(self, key) -> None: ...
    def __getattr__(self, name) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __len__(self): ...
    def __iter__(self): ...
    __hash__: Incomplete
    def keys(self): ...
    def copy(self): ...
    def deepcopy(self): ...
